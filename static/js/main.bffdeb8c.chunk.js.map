{"version":3,"sources":["components/PictureItem.js","components/StatusBar.js","App.js","serviceWorker.js","index.js"],"names":["PictureItem","props","imageId","id","react_default","a","createElement","className","src","imageSrc","alt","data-id","dataId","onClick","pictureClickHandler","StatusBar","msg","score","highScore","App","state","randomImages","chemicals","clickedImageIds","scoreColor","_this","length","setState","includes","gameOver","Object","toConsumableArray","concat","shuffleArray","updateHighScore","array","j","x","i","Math","floor","random","_this2","this","src_components_StatusBar","color","map","chemical","src_components_PictureItem","key","url","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bffdeb8c.chunk.js","sourcesContent":["import React from 'react'\nimport './PictureItem.css'\n\nconst PictureItem  = props => {\n    const imageId = props.id\n    return (\n        <img className = 'clicky-image' src={props.imageSrc} alt='clicky' data-id={props.dataId} onClick={() => props.pictureClickHandler(imageId)} />\n    )\n}\nexport default PictureItem","import React from \"react\";\nimport \"./StatusBar.css\";\n\nconst StatusBar = props => {\n  return (\n      \n  <div id=\"status-bar\" >\n  <div id='chem-clickey'>\n  Chemistry Clickey\n  </div>\n  <div id='status-msg'>\n      {props.msg || (12 - props.score) + ' molecules left'}\n      </div>\n  <ul id= 'scores-list'>\n      <li>\n          Score <span id='score-text'>{props.score}</span>\n      </li>\n      <li>\n          High Score <span id='high-score-text'>{props.highScore}</span>\n      </li>\n  </ul>\n  </div>\n\n\n  )\n};\nexport default StatusBar;\n","import React, { Component } from \"react\";\nimport chemicals from \"./chemicals.json\";\nimport PictureItem from \"./components/PictureItem\";\nimport StatusBar from \"./components/StatusBar\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    randomImages: chemicals,\n    clickedImageIds: [],\n    score: 0,\n    highScore: 0,\n    scoreColor: '#222',\n    msg: ''\n  };\n\n\n  pictureClickHandler = id => {\n    if (this.state.clickedImageIds.length === 0) {\n      this.setState({\n        msg: ''\n      })\n    }\n    if (this.state.score === 12) {\n      this.setState({\n        score: 1,\n        clickedImageIds: [id],\n        msg: ''\n      }, () => this.updateHighScore(this.state.score))\n      return\n    }\n\n    if (this.state.clickedImageIds.length === 0 && id=== 2) {\n      this.setState({\n        msg: 'BONUS WIN!! Aminopterin was the first effective chemotherapy drug',\n        score: 12,\n        highScore: 12\n      })\n      return\n    }\n\n    this.state.clickedImageIds.includes(id)\n      ? this.gameOver(id)\n      : this.setState({\n        clickedImageIds: [...this.state.clickedImageIds, id],\n        score: this.state.score + 1,\n        randomImages: this.shuffleArray(this.state.randomImages)\n      }, () => this.updateHighScore(this.state.score));\n  };\n\n  shuffleArray = array => {\n    let j, x, i;\n    for (i = array.length - 1; i > 0; i--) {\n      j = Math.floor(Math.random() * (i + 1));\n      x = array[i];\n      array[i] = array[j];\n      array[j] = x;\n    }\n    return array;\n  };\n  gameOver = () => {\n    this.setState({\n      clickedImageIds: [],\n      score: 0,\n      msg: 'Already clicked that one! Choose another molecule to start over'\n    });\n\n  };\n\n  updateHighScore = score => {\n    if (score > this.state.highScore) {\n      this.setState({\n        highScore: this.state.score\n      });\n    }\n    if (score === 12) {\n      this.setState({\n        msg: 'You got all 12! Nice job!',\n        score: 0,\n        clickedImageIds: []\n      })\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n      <div className='app-header'>\n      <h1>\n        Welcome to Chemistry Clickey\n      </h1>\n      <h2>\n        Challenging your memory (and chemistry) skills!\n      </h2>\n      <h3>\n        Instructions:\n      </h3>\n      </div>\n        <div className='instructions'>\n        <p>It's classic Memory with organic molecules!</p>\n        <p>Click a molecule, get a point. Then click different molecules to rack up more points.</p>\n        <p>Click the same molecule, lose the game! Get through all 12, win the game!</p>\n        </div>\n        <StatusBar\n          score={this.state.score}\n          highScore={this.state.highScore}\n          color={this.state.scoreColor}\n          msg={this.state.msg}\n        />\n        <div className=\"images\">\n          {this.state.randomImages.map(chemical => {\n            return (\n              <PictureItem\n                key={chemical.id}\n                id={chemical.id}\n                imageSrc={chemical.url}\n                pictureClickHandler={this.pictureClickHandler}\n                dataId={chemical.id}\n              />\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}